{"ast":null,"code":"var _jsxFileName = \"/Users/joannafan/Downloads/travelapp-main/frontend/src/components/ItineraryForm.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      fields: {},\n      errors: {}\n    };\n\n    this.handleValidation = () => {\n      let fields = this.state.fields;\n      let errors = {};\n      let formIsValid = true; //Name check if name is empty or not\n\n      if (!fields[\"name\"]) {\n        formIsValid = false;\n        errors[\"name\"] = \"Cannot be empty\";\n      } //name should not contain special char\n\n\n      if (typeof fields[\"name\"] !== \"undefined\") {\n        if (!fields[\"name\"].match(/^[a-zA-Z]+$/)) {\n          formIsValid = false;\n          errors[\"name\"] = \"Only letters\";\n        }\n      } //Email should not be empty\n\n\n      if (!fields[\"email\"]) {\n        formIsValid = false;\n        errors[\"email\"] = \"Cannot be empty\";\n      } //validating email\n\n\n      if (typeof fields[\"email\"] !== \"undefined\") {\n        let lastAtPos = fields[\"email\"].lastIndexOf('@');\n        let lastDotPos = fields[\"email\"].lastIndexOf('.');\n\n        if (!(lastAtPos < lastDotPos && lastAtPos > 0 && fields[\"email\"].indexOf('@@') === -1 && lastDotPos > 2 && fields[\"email\"].length - lastDotPos > 2)) {\n          formIsValid = false;\n          errors[\"email\"] = \"Email is not valid\";\n        }\n      }\n\n      this.setState({\n        errors: errors\n      });\n      return formIsValid;\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      if (this.handleValidation()) alert(\"form submitted successfully\");\n    };\n  }\n\n  //updating the field value\n  handleUpdate(field, e) {\n    let fields = this.state.fields;\n    fields[field] = e.target.value;\n    this.setState({\n      fields\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: 200\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit.bind(this),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Name\",\n          onChange: this.handleUpdate.bind(this, \"name\"),\n          value: this.state.fields[\"name\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          children: this.state.errors[\"name\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Email\",\n          onChange: this.handleUpdate.bind(this, \"email\"),\n          value: this.state.fields[\"email\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          children: this.state.errors[\"email\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"click\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 3\n    }, this);\n  }\n\n} // import React, { useState } from 'react'\n// import axios from 'axios'\n// const ItineraryForm = () => {\n//     const initialFormData = {\n//         tripName: '',\n//         startDate:'',\n//         endDate:'',\n//         people:'',\n//     };\n//     const [formData, setFormData] = useState(initialFormData);\n//     const [formSuccess, setFormSuccess] = useState('');\n//     const [formErrors, setFormErrors] = useState([]);\n//     const handleSubmit = async(e) => {\n//         e.preventDefault();\n//         try {\n//             // send POST request\n//             await axios.post('http://localhost:8082/trip', formData);\n//             // HTTP req successful\n//             setFormSuccess('Data received correctly');\n//             // Reset form data\n//             setFormData(initialFormData);\n//         } catch(err) {\n//             handleErrors(err);\n//         }\n//     };\n//     const handleErrors = (err) => {\n//         if(err.response.data && err.response.data.errors) {\n//             // Handle validation errors\n//             const { errors } = err.response.data;\n//             // let errorMsg = [];\n//             // for(let error of errors) {\n//             //     const { msg } = error;\n//             //     errorMsg.push(msg);\n//             // }\n//             // Generate an array of error messages using Array.map()\n//             const errorMsg = errors.map((error) => {\n//                 return error.msg\n//               });\n//             setFormErrors(errorMsg);\n//         } else {\n//             // Handle generic error\n//             setFormErrors(['Oops, there was an error!']);\n//         }\n//     };\n//     const handleChange = (e) => {\n//         setFormData({\n//             ...formData,\n//             [e.target.id]: e.target.value,\n//         });\n//         setFormErrors([]);\n//         setFormSuccess('');\n//     };\n//     return (\n//         <div className='ItineraryForm'>\n//             {formErrors.length >0 && (\n//                 <div className='form-errors'>\n//                     {formErrors.map((error, index) => (\n//                         <p key={index}>{error}</p>\n//                     ))}\n//                 </div>\n//             )}\n//             <form onSubmit={handleSubmit} className = 'form'>\n//                 <fieldset>\n//                     <div>\n//                         <label>Start a new trip!</label>\n//                             <input \n//                                 type='text'\n//                                 id='tripName'\n//                                 class=\"input\"\n//                                 placeholder='trip to...'\n//                                 value={formData.tripName}\n//                                 onChange={handleChange}\n//                                 required/>\n//                     </div>\n//                     <div>\n//                         <label>Start Date</label>\n//                             <input\n//                                 type='text'\n//                                 id='startDate'\n//                                 class=\"input\"\n//                                 placeholder='DD/MM/YYYY'\n//                                 value={formData.startDate}\n//                                 onChange={handleChange}\n//                                 required\n//                                 pattern='\\d{2}/\\d{2}/\\d{4}'/>\n//                     </div>\n//                     <div>\n//                         <label>End Date </label>\n//                             <input\n//                                 type='text'\n//                                 id='endDate'\n//                                 class=\"input\"\n//                                 placeholder='DD/MM/YYYY'\n//                                 value={formData.endDate}\n//                                 onChange={handleChange}\n//                                 required\n//                                 pattern='\\d{2}/\\d{2}/\\d{4}'\n//                                 />\n//                     </div> \n//                     <div>\n//                         <label>People </label>\n//                             <textarea\n//                                 type='text'\n//                                 id='people'\n//                                 class=\"input\"\n//                                 placeholder='going with...'\n//                                 value={formData.people}\n//                                 onChange={handleChange}/>\n//                     </div>\n//                     <button type=\"submit\" onClick={handleSubmit}>\n//                         Create Trip\n//                     </button>\n//                 </fieldset>\n//                 {formSuccess && <p>{formSuccess}</p>}\n//             </form>\n//         </div>\n//     )\n// }\n// export default ItineraryForm","map":{"version":3,"names":["React","App","Component","state","fields","errors","handleValidation","formIsValid","match","lastAtPos","lastIndexOf","lastDotPos","indexOf","length","setState","handleSubmit","e","preventDefault","alert","handleUpdate","field","target","value","render","margin","bind","color"],"sources":["/Users/joannafan/Downloads/travelapp-main/frontend/src/components/ItineraryForm.js"],"sourcesContent":["import React from 'react';\n\nexport default class App extends React.Component {\n\t\n\tstate = {\n\t\tfields: {},\n\t\terrors: {}\n\t}\n\t//method to validate values\n\thandleValidation = ()=>{\n\tlet fields = this.state.fields;\n\tlet errors = {};\n\tlet formIsValid = true;\n\n\t//Name check if name is empty or not\n\tif(!fields[\"name\"]){\n\t\tformIsValid = false;\n\t\terrors[\"name\"] = \"Cannot be empty\";\n\t}\n\t\t//name should not contain special char\n\tif(typeof fields[\"name\"] !== \"undefined\"){\n\t\tif(!fields[\"name\"].match(/^[a-zA-Z]+$/)){\n\t\t\tformIsValid = false;\n\t\t\terrors[\"name\"] = \"Only letters\";\n\t\t}\t\t\n\t}\n\n\t//Email should not be empty\n\tif(!fields[\"email\"]){\n\t\tformIsValid = false;\n\t\terrors[\"email\"] = \"Cannot be empty\";\n\t}\n\t\t//validating email\n\tif(typeof fields[\"email\"] !== \"undefined\"){\n\t\tlet lastAtPos = fields[\"email\"].lastIndexOf('@');\n\t\tlet lastDotPos = fields[\"email\"].lastIndexOf('.');\n\n\t\tif (!(lastAtPos < lastDotPos && lastAtPos > 0\n\t\t&& fields[\"email\"].indexOf('@@') === -1 &&\n\t\tlastDotPos > 2 && (fields[\"email\"].length - lastDotPos) > 2)) {\n\t\t\tformIsValid = false;\n\t\t\terrors[\"email\"] = \"Email is not valid\";\n\t\t}\n\t}\n\n\tthis.setState({errors: errors});\n\treturn formIsValid;\n}\n\n\t//after submit form it will be called\nhandleSubmit = (e) =>{\ne.preventDefault();\n\tif(this.handleValidation())\n\talert(\"form submitted successfully\")\n}\n\n\t//updating the field value\nhandleUpdate(field, e){\t\t\n\tlet fields = this.state.fields;\n\tfields[field] = e.target.value;\t\t\n\tthis.setState({fields});\n}\n\n\n\n\trender(){\n\treturn (\n\t\t<div style = {{margin:200}}>\t\t\n\t\t\t<form onSubmit= {this.handleSubmit.bind(this)}>\n\t\t\t\t<input type=\"text\" placeholder=\"Name\"\n\t\t\t\tonChange={this.handleUpdate.bind(this, \"name\")}\n\t\t\t\tvalue={this.state.fields[\"name\"]}/>\n\t\t\t\t\t<span style={{color: \"red\"}}>\n\t\t\t\t\t{this.state.errors[\"name\"]}</span>\n\t\t\t\t\t<br/>\n\t\t\t\t<input type=\"text\" placeholder=\"Email\"\n\t\t\t\tonChange={this.handleUpdate.bind(this, \"email\")}\n\t\t\t\tvalue={this.state.fields[\"email\"]}/>\n\t\t\t\t\t<span style={{color: \"red\"}}>\n\t\t\t\t\t{this.state.errors[\"email\"]}</span>\n\t\t\t\t\t<br/>\n\t\t\t\t<button type = \"submit\">click</button>\n\t\n\t\t\t</form>\n\t\t</div>\n\t)\n}\n}\n\n\n// import React, { useState } from 'react'\n// import axios from 'axios'\n\n\n// const ItineraryForm = () => {\n//     const initialFormData = {\n//         tripName: '',\n//         startDate:'',\n//         endDate:'',\n//         people:'',\n//     };\n\n//     const [formData, setFormData] = useState(initialFormData);\n//     const [formSuccess, setFormSuccess] = useState('');\n//     const [formErrors, setFormErrors] = useState([]);\n\n//     const handleSubmit = async(e) => {\n//         e.preventDefault();\n//         try {\n//             // send POST request\n//             await axios.post('http://localhost:8082/trip', formData);\n\n//             // HTTP req successful\n//             setFormSuccess('Data received correctly');\n\n//             // Reset form data\n//             setFormData(initialFormData);\n//         } catch(err) {\n//             handleErrors(err);\n//         }\n//     };\n\n//     const handleErrors = (err) => {\n//         if(err.response.data && err.response.data.errors) {\n//             // Handle validation errors\n//             const { errors } = err.response.data;\n\n//             // let errorMsg = [];\n\n//             // for(let error of errors) {\n//             //     const { msg } = error;\n\n//             //     errorMsg.push(msg);\n//             // }\n\n//             // Generate an array of error messages using Array.map()\n//             const errorMsg = errors.map((error) => {\n//                 return error.msg\n//               });\n\n//             setFormErrors(errorMsg);\n    \n//         } else {\n//             // Handle generic error\n//             setFormErrors(['Oops, there was an error!']);\n//         }\n//     };\n\n//     const handleChange = (e) => {\n//         setFormData({\n//             ...formData,\n//             [e.target.id]: e.target.value,\n//         });\n//         setFormErrors([]);\n//         setFormSuccess('');\n//     };\n\n//     return (\n//         <div className='ItineraryForm'>\n//             {formErrors.length >0 && (\n//                 <div className='form-errors'>\n//                     {formErrors.map((error, index) => (\n//                         <p key={index}>{error}</p>\n//                     ))}\n//                 </div>\n//             )}\n//             <form onSubmit={handleSubmit} className = 'form'>\n                \n//                 <fieldset>\n//                     <div>\n//                         <label>Start a new trip!</label>\n//                             <input \n//                                 type='text'\n//                                 id='tripName'\n//                                 class=\"input\"\n//                                 placeholder='trip to...'\n//                                 value={formData.tripName}\n//                                 onChange={handleChange}\n//                                 required/>\n//                     </div>\n//                     <div>\n//                         <label>Start Date</label>\n//                             <input\n//                                 type='text'\n//                                 id='startDate'\n//                                 class=\"input\"\n//                                 placeholder='DD/MM/YYYY'\n//                                 value={formData.startDate}\n//                                 onChange={handleChange}\n//                                 required\n//                                 pattern='\\d{2}/\\d{2}/\\d{4}'/>\n//                     </div>\n//                     <div>\n//                         <label>End Date </label>\n//                             <input\n//                                 type='text'\n//                                 id='endDate'\n//                                 class=\"input\"\n//                                 placeholder='DD/MM/YYYY'\n//                                 value={formData.endDate}\n//                                 onChange={handleChange}\n//                                 required\n//                                 pattern='\\d{2}/\\d{2}/\\d{4}'\n//                                 />\n//                     </div> \n//                     <div>\n//                         <label>People </label>\n//                             <textarea\n//                                 type='text'\n//                                 id='people'\n//                                 class=\"input\"\n//                                 placeholder='going with...'\n//                                 value={formData.people}\n//                                 onChange={handleChange}/>\n//                     </div>\n//                     <button type=\"submit\" onClick={handleSubmit}>\n//                         Create Trip\n//                     </button>\n//                 </fieldset>\n//                 {formSuccess && <p>{formSuccess}</p>}\n//             </form>\n//         </div>\n//     )\n// }\n// export default ItineraryForm"],"mappings":"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CC,KAAKvB,KAAL,CAAWE,MAAX,CAAkB,OAAlB;QADD;UAAA;UAAA;UAAA;QAAA,QAVF,eAYE;UAAA;UAAA;UAAA;QAAA,QAZF,eAaC;UAAQ,IAAI,EAAG,QAAf;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAbD;MAAA;QAAA;QAAA;QAAA;MAAA;IADD;MAAA;MAAA;MAAA;IAAA,QADD;EAoBA;;AApFgD,C,CAwFjD;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}