{"ast":null,"code":"var _jsxFileName = \"/Users/joannafan/Downloads/travelapp-main/frontend/src/components/ItineraryForm.js\",\n    _s = $RefreshSig$();\n\nimport { useForm } from \"react-hook-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  var _errors$userName, _errors$email, _errors$password, _errors$gender;\n\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    mode: \"all\"\n  });\n\n  const onSubmit = data => console.log(data);\n\n  console.log(errors);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      autoComplete: \"off\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create an account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register(\"userName\", {\n          required: \"Username is Required...\",\n          minLength: {\n            value: 3,\n            message: \"Username must be atleast 3 characters long...\"\n          },\n          maxLength: {\n            value: 30,\n            message: \"Username must be atmost 30 characters long...\"\n          }\n        }),\n        placeholder: \"Username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: (_errors$userName = errors.userName) === null || _errors$userName === void 0 ? void 0 : _errors$userName.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register(\"email\", {\n          required: \"Email is Required...\",\n          pattern: {\n            value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n            message: \"Email must be valid\"\n          }\n        }),\n        placeholder: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register(\"password\", {\n          required: \"Password is Required...\",\n          pattern: {\n            value: /^(?=.*[0-9])(?=.*[!@#$%^&*.,])[a-zA-Z0-9!@#$%^&*.,]{6,16}$/,\n            message: \"Password Must Contain Atleast 6 Characters, One Uppercase, One Lowercase, One Number and One Special Case Character\"\n          }\n        }),\n        placeholder: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", { ...register(\"gender\", {\n          required: \"Gender is Required...\"\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Gender\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"female\",\n          children: \"Female\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"male\",\n          children: \"Male\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"other\",\n          children: \"Other\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: (_errors$gender = errors.gender) === null || _errors$gender === void 0 ? void 0 : _errors$gender.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"HLC1IFclXfL/K+q6lxeDS/Po7Wk=\", false, function () {\n  return [useForm];\n});\n\n_c = App;\nexport default App; // import React, { useState } from 'react'\n// import axios from 'axios'\n// import DatePicker from 'react-datepicker';\n// // import moment from \"moment\";\n// import 'react-datepicker/dist/react-datepicker.css';\n// const ItineraryForm = () => {\n//     const initialFormData = {\n//         tripName: '',\n//         startDate: new Date(),\n//         endDate: new Date(),\n//         people:'',\n//     };\n//     function isRequired(value) {\n//         return value != null && value.trim().length > 0;\n//       }\n//     const validations = [\n//         ({tripName}) => isRequired(tripName) || {tripName: \"Trip Name is Required\"},\n//         ({startDate, endDate}) => (!startDate || !endDate) || startDate.getDate() <= endDate.getDate() || {endDate: \"End Date is not valid\"}\n//     ];\n//     function validate(validations, values) {\n//         const errors = validations\n//           .map(validation => validation(values))\n//           .filter(validation => typeof validation === 'object');\n//         return {isValid: errors.length === 0, errors: errors.reduce((errors, error) => ({...errors, ...error}), {})};\n//       }\n//     const {isValid: initialIsValid, errors: initialErrors} = validate(validations, initialFormData);\n//     const [formData, setFormData] = useState(initialFormData);\n//     const [formSuccess, setFormSuccess] = useState('');\n//     const [formErrors, setFormErrors] = useState(initialErrors);\n//     const [isValid, setValid] = useState(initialIsValid);\n//     const [touched, setTouched] = useState({});\n//     const handleSubmit = async(e) => {\n//         e.preventDefault();\n//         try {\n//             // send POST request\n//             await axios.post('http://localhost:8082/trip', formData);\n//             // HTTP req successful\n//             setFormSuccess('Data received correctly');\n//             // Reset form data\n//             setFormData(initialFormData);\n//             setValid(initialIsValid);\n//             setTouched({});\n//         } catch(err) {\n//             handleErrors(err);\n//         }\n//     };\n//     const handleErrors = (err) => {\n//         if(err.response.data && err.response.data.errors) {\n//             // Handle validation errors\n//             const { errors } = err.response.data;\n//             // Generate an array of error messages using Array.map()\n//             const errorMsg = errors.map((error) => {\n//                 return error.msg\n//               });\n//             setFormErrors(errorMsg);\n//         } else {\n//             // Handle generic error\n//             setFormErrors(['Oops, there was an error!']);\n//         }\n//     };\n//     const handleChange = (e) => {\n//         const newFormData = {...formData, [e.target.id]: e.target.value};\n//         const {isValid, errors} = validate(validations, newFormData);\n//         setFormData(newFormData);\n//         setFormErrors(errors);\n//         setFormSuccess('');\n//         setValid(isValid);\n//         setTouched({...touched, [e.target.id]: true});\n//     };\n//     const handleDateChange = (date, dateType) => {\n//         const newFormData = {...formData, [dateType]: date};\n//         const {isValid, errors} = validate(validations, newFormData);\n//         setFormData(newFormData);\n//         setFormErrors(errors);\n//         setFormSuccess('');\n//         setValid(isValid);\n//         setTouched({...touched, [dateType]: true});\n//       };\n//     return (\n//         <div className='ItineraryForm'>\n//             <form onSubmit={handleSubmit} className = 'form'>\n//                 <fieldset>\n//                     <div>\n//                         <label>Start a new trip!</label>\n//                             <input \n//                                 type='text'\n//                                 id='tripName'\n//                                 className=\"input\"\n//                                 placeholder='trip to...'\n//                                 value={formData.tripName}\n//                                 onChange={handleChange}\n//                                 required/>\n//                             {touched.tripName && formErrors.tripName && <p className=\"error\">{formErrors.tripName}</p>}\n//                     </div>\n//                     <div>\n//                         <label>Start Date</label>\n//                             <DatePicker\n//                                 selected={formData.startDate}\n//                                 onChange={(date) => handleDateChange(date, 'startDate')}/>\n//                     </div>\n//                     <div>\n//                         <label>End Date </label>\n//                             <DatePicker\n//                                 selected={formData.endDate}\n//                                 minDate={new Date(formData.startDate)}\n//                                 onChange={(date) => handleDateChange(date, 'endDate')}/>\n//                     </div> \n//                     <div>\n//                         <label>People (Change to invite people later)</label>\n//                             <textarea\n//                                 type='text'\n//                                 id='people'\n//                                 className=\"input\"\n//                                 placeholder='going with...'\n//                                 value={formData.people}\n//                                 onChange={handleChange}/>\n//                     </div>\n//                     <button className=\"button\" type=\"submit\" disabled={isValid} onClick={handleSubmit}>\n//                         Create Trip\n//                     </button>\n//                 </fieldset>\n//                 {formSuccess && <p>{formSuccess}</p>}\n//             </form>\n//         </div>\n//     )\n// }\n// export default ItineraryForm\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useForm","App","register","handleSubmit","formState","errors","mode","onSubmit","data","console","log","required","minLength","value","message","maxLength","userName","pattern","email","password","gender"],"sources":["/Users/joannafan/Downloads/travelapp-main/frontend/src/components/ItineraryForm.js"],"sourcesContent":["import { useForm } from \"react-hook-form\";\n\nfunction App() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    mode: \"all\",\n  });\n\n  const onSubmit = (data) => console.log(data);\n\n  console.log(errors);\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={handleSubmit(onSubmit)} autoComplete=\"off\">\n        <h2>Create an account</h2>\n        <input\n          {...register(\"userName\", {\n            required: \"Username is Required...\",\n            minLength: {\n              value: 3,\n              message: \"Username must be atleast 3 characters long...\",\n            },\n            maxLength: {\n              value: 30,\n              message: \"Username must be atmost 30 characters long...\",\n            },\n          })}\n          placeholder=\"Username\"\n        />\n        <p>{errors.userName?.message}</p>\n        <input\n          {...register(\"email\", {\n            required: \"Email is Required...\",\n            pattern: {\n              value:\n                /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n              message: \"Email must be valid\",\n            },\n          })}\n          placeholder=\"Email\"\n        />\n        <p>{errors.email?.message}</p>\n        <input\n          {...register(\"password\", {\n            required: \"Password is Required...\",\n            pattern: {\n              value:\n                /^(?=.*[0-9])(?=.*[!@#$%^&*.,])[a-zA-Z0-9!@#$%^&*.,]{6,16}$/,\n              message:\n                \"Password Must Contain Atleast 6 Characters, One Uppercase, One Lowercase, One Number and One Special Case Character\",\n            },\n          })}\n          placeholder=\"Password\"\n        />\n        <p>{errors.password?.message}</p>\n        <select\n          {...register(\"gender\", {\n            required: \"Gender is Required...\",\n          })}\n        >\n          <option value=\"\">Select Gender</option>\n          <option value=\"female\">Female</option>\n          <option value=\"male\">Male</option>\n          <option value=\"other\">Other</option>\n        </select>\n        <p>{errors.gender?.message}</p>\n        <input type=\"Submit\" />\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n\n// import React, { useState } from 'react'\n// import axios from 'axios'\n// import DatePicker from 'react-datepicker';\n// // import moment from \"moment\";\n// import 'react-datepicker/dist/react-datepicker.css';\n\n\n// const ItineraryForm = () => {\n//     const initialFormData = {\n//         tripName: '',\n//         startDate: new Date(),\n//         endDate: new Date(),\n//         people:'',\n//     };\n\n//     function isRequired(value) {\n//         return value != null && value.trim().length > 0;\n//       }\n\n//     const validations = [\n//         ({tripName}) => isRequired(tripName) || {tripName: \"Trip Name is Required\"},\n//         ({startDate, endDate}) => (!startDate || !endDate) || startDate.getDate() <= endDate.getDate() || {endDate: \"End Date is not valid\"}\n//     ];\n\n\n//     function validate(validations, values) {\n//         const errors = validations\n//           .map(validation => validation(values))\n//           .filter(validation => typeof validation === 'object');\n//         return {isValid: errors.length === 0, errors: errors.reduce((errors, error) => ({...errors, ...error}), {})};\n//       }\n    \n//     const {isValid: initialIsValid, errors: initialErrors} = validate(validations, initialFormData);\n//     const [formData, setFormData] = useState(initialFormData);\n//     const [formSuccess, setFormSuccess] = useState('');\n//     const [formErrors, setFormErrors] = useState(initialErrors);\n//     const [isValid, setValid] = useState(initialIsValid);\n//     const [touched, setTouched] = useState({});\n\n//     const handleSubmit = async(e) => {\n//         e.preventDefault();\n//         try {\n//             // send POST request\n//             await axios.post('http://localhost:8082/trip', formData);\n\n//             // HTTP req successful\n//             setFormSuccess('Data received correctly');\n\n//             // Reset form data\n//             setFormData(initialFormData);\n\n//             setValid(initialIsValid);\n\n//             setTouched({});\n//         } catch(err) {\n//             handleErrors(err);\n//         }\n//     };\n    \n//     const handleErrors = (err) => {\n//         if(err.response.data && err.response.data.errors) {\n//             // Handle validation errors\n//             const { errors } = err.response.data;\n\n//             // Generate an array of error messages using Array.map()\n//             const errorMsg = errors.map((error) => {\n//                 return error.msg\n//               });\n\n//             setFormErrors(errorMsg);\n    \n//         } else {\n//             // Handle generic error\n//             setFormErrors(['Oops, there was an error!']);\n//         }\n//     };\n\n//     const handleChange = (e) => {\n//         const newFormData = {...formData, [e.target.id]: e.target.value};\n//         const {isValid, errors} = validate(validations, newFormData);\n//         setFormData(newFormData);\n//         setFormErrors(errors);\n//         setFormSuccess('');\n//         setValid(isValid);\n//         setTouched({...touched, [e.target.id]: true});\n//     };\n\n//     const handleDateChange = (date, dateType) => {\n//         const newFormData = {...formData, [dateType]: date};\n//         const {isValid, errors} = validate(validations, newFormData);\n//         setFormData(newFormData);\n//         setFormErrors(errors);\n//         setFormSuccess('');\n//         setValid(isValid);\n//         setTouched({...touched, [dateType]: true});\n//       };\n\n//     return (\n//         <div className='ItineraryForm'>\n//             <form onSubmit={handleSubmit} className = 'form'>\n                \n//                 <fieldset>\n//                     <div>\n//                         <label>Start a new trip!</label>\n//                             <input \n//                                 type='text'\n//                                 id='tripName'\n//                                 className=\"input\"\n//                                 placeholder='trip to...'\n//                                 value={formData.tripName}\n//                                 onChange={handleChange}\n//                                 required/>\n//                             {touched.tripName && formErrors.tripName && <p className=\"error\">{formErrors.tripName}</p>}\n//                     </div>\n//                     <div>\n//                         <label>Start Date</label>\n//                             <DatePicker\n//                                 selected={formData.startDate}\n//                                 onChange={(date) => handleDateChange(date, 'startDate')}/>\n//                     </div>\n//                     <div>\n//                         <label>End Date </label>\n//                             <DatePicker\n//                                 selected={formData.endDate}\n//                                 minDate={new Date(formData.startDate)}\n//                                 onChange={(date) => handleDateChange(date, 'endDate')}/>\n//                     </div> \n//                     <div>\n//                         <label>People (Change to invite people later)</label>\n//                             <textarea\n//                                 type='text'\n//                                 id='people'\n//                                 className=\"input\"\n//                                 placeholder='going with...'\n//                                 value={formData.people}\n//                                 onChange={handleChange}/>\n//                     </div>\n//                     <button className=\"button\" type=\"submit\" disabled={isValid} onClick={handleSubmit}>\n//                         Create Trip\n//                     </button>\n//                 </fieldset>\n//                 {formSuccess && <p>{formSuccess}</p>}\n//             </form>\n//         </div>\n//     )\n// }\n// export default ItineraryForm"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,iBAAxB;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EAAA;;EACb,MAAM;IACJC,QADI;IAEJC,YAFI;IAGJC,SAAS,EAAE;MAAEC;IAAF;EAHP,IAIFL,OAAO,CAAC;IACVM,IAAI,EAAE;EADI,CAAD,CAJX;;EAQA,MAAMC,QAAQ,GAAIC,IAAD,IAAUC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAA3B;;EAEAC,OAAO,CAACC,GAAR,CAAYL,MAAZ;EAEA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,uBACE;MAAM,QAAQ,EAAEF,YAAY,CAACI,QAAD,CAA5B;MAAwC,YAAY,EAAC,KAArD;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,sBACML,QAAQ,CAAC,UAAD,EAAa;UACvBS,QAAQ,EAAE,yBADa;UAEvBC,SAAS,EAAE;YACTC,KAAK,EAAE,CADE;YAETC,OAAO,EAAE;UAFA,CAFY;UAMvBC,SAAS,EAAE;YACTF,KAAK,EAAE,EADE;YAETC,OAAO,EAAE;UAFA;QANY,CAAb,CADd;QAYE,WAAW,EAAC;MAZd;QAAA;QAAA;QAAA;MAAA,QAFF,eAgBE;QAAA,8BAAIT,MAAM,CAACW,QAAX,qDAAI,iBAAiBF;MAArB;QAAA;QAAA;QAAA;MAAA,QAhBF,eAiBE,sBACMZ,QAAQ,CAAC,OAAD,EAAU;UACpBS,QAAQ,EAAE,sBADU;UAEpBM,OAAO,EAAE;YACPJ,KAAK,EACH,uJAFK;YAGPC,OAAO,EAAE;UAHF;QAFW,CAAV,CADd;QASE,WAAW,EAAC;MATd;QAAA;QAAA;QAAA;MAAA,QAjBF,eA4BE;QAAA,2BAAIT,MAAM,CAACa,KAAX,kDAAI,cAAcJ;MAAlB;QAAA;QAAA;QAAA;MAAA,QA5BF,eA6BE,sBACMZ,QAAQ,CAAC,UAAD,EAAa;UACvBS,QAAQ,EAAE,yBADa;UAEvBM,OAAO,EAAE;YACPJ,KAAK,EACH,4DAFK;YAGPC,OAAO,EACL;UAJK;QAFc,CAAb,CADd;QAUE,WAAW,EAAC;MAVd;QAAA;QAAA;QAAA;MAAA,QA7BF,eAyCE;QAAA,8BAAIT,MAAM,CAACc,QAAX,qDAAI,iBAAiBL;MAArB;QAAA;QAAA;QAAA;MAAA,QAzCF,eA0CE,uBACMZ,QAAQ,CAAC,QAAD,EAAW;UACrBS,QAAQ,EAAE;QADW,CAAX,CADd;QAAA,wBAKE;UAAQ,KAAK,EAAC,EAAd;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QALF,eAME;UAAQ,KAAK,EAAC,QAAd;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QANF,eAOE;UAAQ,KAAK,EAAC,MAAd;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAPF,eAQE;UAAQ,KAAK,EAAC,OAAd;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QARF;MAAA;QAAA;QAAA;QAAA;MAAA,QA1CF,eAoDE;QAAA,4BAAIN,MAAM,CAACe,MAAX,mDAAI,eAAeN;MAAnB;QAAA;QAAA;QAAA;MAAA,QApDF,eAqDE;QAAO,IAAI,EAAC;MAAZ;QAAA;QAAA;QAAA;MAAA,QArDF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AA2DD;;GAxEQb,G;UAKHD,O;;;KALGC,G;AA0ET,eAAeA,GAAf},"metadata":{},"sourceType":"module"}