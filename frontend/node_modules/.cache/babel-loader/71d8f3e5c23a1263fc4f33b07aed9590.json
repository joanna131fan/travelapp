{"ast":null,"code":"var _jsxFileName = \"/Users/joannafan/Downloads/travelapp-main/frontend/src/components/ItineraryForm.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState } from 'react'\n// import axios from 'axios'\n// import DatePicker from 'react-datepicker';\n// // import moment from \"moment\";\n// import 'react-datepicker/dist/react-datepicker.css';\n// const ItineraryForm = () => {\n//     const initialFormData = {\n//         tripName: '',\n//         startDate: new Date(),\n//         endDate: new Date(),\n//         people:'',\n//     };\n//     function isRequired(value) {\n//         return value != null && value.trim().length > 0;\n//       }\n//     const validations = [\n//         ({tripName}) => isRequired(tripName) || {tripName: \"Trip Name is Required\"},\n//         ({startDate, endDate}) => (!startDate || !endDate) || startDate.getDate() <= endDate.getDate() || {endDate: \"End Date is not valid\"}\n//     ];\n//     function validate(validations, values) {\n//         const errors = validations\n//           .map(validation => validation(values))\n//           .filter(validation => typeof validation === 'object');\n//         return {isValid: errors.length === 0, errors: errors.reduce((errors, error) => ({...errors, ...error}), {})};\n//       }\n//     const {isValid: initialIsValid, errors: initialErrors} = validate(validations, initialFormData);\n//     const [formData, setFormData] = useState(initialFormData);\n//     const [formSuccess, setFormSuccess] = useState('');\n//     const [formErrors, setFormErrors] = useState(initialErrors);\n//     const [isValid, setValid] = useState(initialIsValid);\n//     const [touched, setTouched] = useState({});\n//     const handleSubmit = async(e) => {\n//         e.preventDefault();\n//         try {\n//             // send POST request\n//             await axios.post('http://localhost:8082/trip', formData);\n//             // HTTP req successful\n//             setFormSuccess('Data received correctly');\n//             // Reset form data\n//             setFormData(initialFormData);\n//             setValid(initialIsValid);\n//             setTouched({});\n//         } catch(err) {\n//             handleErrors(err);\n//         }\n//     };\n//     const handleErrors = (err) => {\n//         if(err.response.data && err.response.data.errors) {\n//             // Handle validation errors\n//             const { errors } = err.response.data;\n//             // Generate an array of error messages using Array.map()\n//             const errorMsg = errors.map((error) => {\n//                 return error.msg\n//               });\n//             setFormErrors(errorMsg);\n//         } else {\n//             // Handle generic error\n//             setFormErrors(['Oops, there was an error!']);\n//         }\n//     };\n//     const handleChange = (e) => {\n//         const newFormData = {...formData, [e.target.id]: e.target.value};\n//         const {isValid, errors} = validate(validations, newFormData);\n//         setFormData(newFormData);\n//         setFormErrors(errors);\n//         setFormSuccess('');\n//         setValid(isValid);\n//         setTouched({...touched, [e.target.id]: true});\n//     };\n//     const handleDateChange = (date, dateType) => {\n//         const newFormData = {...formData, [dateType]: date};\n//         const {isValid, errors} = validate(validations, newFormData);\n//         setFormData(newFormData);\n//         setFormErrors(errors);\n//         setFormSuccess('');\n//         setValid(isValid);\n//         setTouched({...touched, [dateType]: true});\n//       };\n//     return (\n//         <div className='ItineraryForm'>\n//             <form onSubmit={handleSubmit} className = 'form'>\n//                 <fieldset>\n//                     <div>\n//                         <label>Start a new trip!</label>\n//                             <input \n//                                 type='text'\n//                                 id='tripName'\n//                                 className=\"input\"\n//                                 placeholder='trip to...'\n//                                 value={formData.tripName}\n//                                 onChange={handleChange}\n//                                 required/>\n//                             {touched.tripName && formErrors.tripName && <p className=\"error\">{formErrors.tripName}</p>}\n//                     </div>\n//                     <div>\n//                         <label>Start Date</label>\n//                             <DatePicker\n//                                 selected={formData.startDate}\n//                                 onChange={(date) => handleDateChange(date, 'startDate')}/>\n//                     </div>\n//                     <div>\n//                         <label>End Date </label>\n//                             <DatePicker\n//                                 selected={formData.endDate}\n//                                 minDate={new Date(formData.startDate)}\n//                                 onChange={(date) => handleDateChange(date, 'endDate')}/>\n//                     </div> \n//                     <div>\n//                         <label>People (Change to invite people later)</label>\n//                             <textarea\n//                                 type='text'\n//                                 id='people'\n//                                 className=\"input\"\n//                                 placeholder='going with...'\n//                                 value={formData.people}\n//                                 onChange={handleChange}/>\n//                     </div>\n//                     <button className=\"button\" type=\"submit\" disabled={isValid} onClick={handleSubmit}>\n//                         Create Trip\n//                     </button>\n//                 </fieldset>\n//                 {formSuccess && <p>{formSuccess}</p>}\n//             </form>\n//         </div>\n//     )\n// }\n// export default ItineraryForm\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Form, Button } from 'react-bootstrap';\nimport { motion } from 'framer-motion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ItineraryForm = props => {\n  _s();\n\n  const {\n    user\n  } = props;\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    defaultValues: {\n      tripName: user.tripName\n    }\n  });\n\n  const onSubmit = data => {\n    props.updateUser(data);\n    props.history.push('/second');\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    className: \"input-form\",\n    onSubmit: handleSubmit(onSubmit),\n    children: /*#__PURE__*/_jsxDEV(motion.div, {\n      className: \"col-md-6 offset-md-3\",\n      initial: {\n        x: '-100vw'\n      },\n      animate: {\n        x: 0\n      },\n      transition: {\n        stiffness: 150\n      },\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"first_name\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Trip Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          name: \"tripName\",\n          placeholder: \"Trip to...\",\n          autoComplete: \"off\",\n          ref: register({\n            required: 'Trip name is required.'\n          }),\n          className: `${errors.tripName ? 'input-error' : ''}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), errors.first_name && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"errorMsg\",\n          children: errors.tripName.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ItineraryForm, \"iyH731LTjAbxnbpM16EGorBPneQ=\", false, function () {\n  return [useForm];\n});\n\n_c = ItineraryForm;\nexport default IntineraryForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ItineraryForm\");","map":{"version":3,"names":["React","useForm","Form","Button","motion","ItineraryForm","props","user","register","handleSubmit","errors","defaultValues","tripName","onSubmit","data","updateUser","history","push","x","stiffness","required","first_name","message","IntineraryForm"],"sources":["/Users/joannafan/Downloads/travelapp-main/frontend/src/components/ItineraryForm.js"],"sourcesContent":["// import React, { useState } from 'react'\n// import axios from 'axios'\n// import DatePicker from 'react-datepicker';\n// // import moment from \"moment\";\n// import 'react-datepicker/dist/react-datepicker.css';\n\n\n// const ItineraryForm = () => {\n//     const initialFormData = {\n//         tripName: '',\n//         startDate: new Date(),\n//         endDate: new Date(),\n//         people:'',\n//     };\n\n//     function isRequired(value) {\n//         return value != null && value.trim().length > 0;\n//       }\n\n//     const validations = [\n//         ({tripName}) => isRequired(tripName) || {tripName: \"Trip Name is Required\"},\n//         ({startDate, endDate}) => (!startDate || !endDate) || startDate.getDate() <= endDate.getDate() || {endDate: \"End Date is not valid\"}\n//     ];\n\n//     function validate(validations, values) {\n//         const errors = validations\n//           .map(validation => validation(values))\n//           .filter(validation => typeof validation === 'object');\n//         return {isValid: errors.length === 0, errors: errors.reduce((errors, error) => ({...errors, ...error}), {})};\n//       }\n    \n//     const {isValid: initialIsValid, errors: initialErrors} = validate(validations, initialFormData);\n//     const [formData, setFormData] = useState(initialFormData);\n//     const [formSuccess, setFormSuccess] = useState('');\n//     const [formErrors, setFormErrors] = useState(initialErrors);\n//     const [isValid, setValid] = useState(initialIsValid);\n//     const [touched, setTouched] = useState({});\n\n//     const handleSubmit = async(e) => {\n//         e.preventDefault();\n//         try {\n//             // send POST request\n//             await axios.post('http://localhost:8082/trip', formData);\n\n//             // HTTP req successful\n//             setFormSuccess('Data received correctly');\n\n//             // Reset form data\n//             setFormData(initialFormData);\n\n//             setValid(initialIsValid);\n\n//             setTouched({});\n//         } catch(err) {\n//             handleErrors(err);\n//         }\n//     };\n    \n//     const handleErrors = (err) => {\n//         if(err.response.data && err.response.data.errors) {\n//             // Handle validation errors\n//             const { errors } = err.response.data;\n\n//             // Generate an array of error messages using Array.map()\n//             const errorMsg = errors.map((error) => {\n//                 return error.msg\n//               });\n\n//             setFormErrors(errorMsg);\n    \n//         } else {\n//             // Handle generic error\n//             setFormErrors(['Oops, there was an error!']);\n//         }\n//     };\n\n//     const handleChange = (e) => {\n//         const newFormData = {...formData, [e.target.id]: e.target.value};\n//         const {isValid, errors} = validate(validations, newFormData);\n//         setFormData(newFormData);\n//         setFormErrors(errors);\n//         setFormSuccess('');\n//         setValid(isValid);\n//         setTouched({...touched, [e.target.id]: true});\n//     };\n\n//     const handleDateChange = (date, dateType) => {\n//         const newFormData = {...formData, [dateType]: date};\n//         const {isValid, errors} = validate(validations, newFormData);\n//         setFormData(newFormData);\n//         setFormErrors(errors);\n//         setFormSuccess('');\n//         setValid(isValid);\n//         setTouched({...touched, [dateType]: true});\n//       };\n\n//     return (\n//         <div className='ItineraryForm'>\n//             <form onSubmit={handleSubmit} className = 'form'>\n                \n//                 <fieldset>\n//                     <div>\n//                         <label>Start a new trip!</label>\n//                             <input \n//                                 type='text'\n//                                 id='tripName'\n//                                 className=\"input\"\n//                                 placeholder='trip to...'\n//                                 value={formData.tripName}\n//                                 onChange={handleChange}\n//                                 required/>\n//                             {touched.tripName && formErrors.tripName && <p className=\"error\">{formErrors.tripName}</p>}\n//                     </div>\n//                     <div>\n//                         <label>Start Date</label>\n//                             <DatePicker\n//                                 selected={formData.startDate}\n//                                 onChange={(date) => handleDateChange(date, 'startDate')}/>\n//                     </div>\n//                     <div>\n//                         <label>End Date </label>\n//                             <DatePicker\n//                                 selected={formData.endDate}\n//                                 minDate={new Date(formData.startDate)}\n//                                 onChange={(date) => handleDateChange(date, 'endDate')}/>\n//                     </div> \n//                     <div>\n//                         <label>People (Change to invite people later)</label>\n//                             <textarea\n//                                 type='text'\n//                                 id='people'\n//                                 className=\"input\"\n//                                 placeholder='going with...'\n//                                 value={formData.people}\n//                                 onChange={handleChange}/>\n//                     </div>\n//                     <button className=\"button\" type=\"submit\" disabled={isValid} onClick={handleSubmit}>\n//                         Create Trip\n//                     </button>\n//                 </fieldset>\n//                 {formSuccess && <p>{formSuccess}</p>}\n//             </form>\n//         </div>\n//     )\n// }\n// export default ItineraryForm\n\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Form, Button } from 'react-bootstrap';\nimport { motion } from 'framer-motion';\n\nconst ItineraryForm = (props) => {\n  const { user } = props;\n  const { register, handleSubmit, errors } = useForm({\n    defaultValues: {\n      tripName: user.tripName\n    }\n  });\n\n  const onSubmit = (data) => {\n    props.updateUser(data);\n    props.history.push('/second');\n  };\n\n  return (\n    <Form className=\"input-form\" onSubmit={handleSubmit(onSubmit)}>\n      <motion.div\n        className=\"col-md-6 offset-md-3\"\n        initial={{ x: '-100vw' }}\n        animate={{ x: 0 }}\n        transition={{ stiffness: 150 }}\n      >\n        <Form.Group controlId=\"first_name\">\n          <Form.Label>Trip Name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"tripName\"\n            placeholder=\"Trip to...\"\n            autoComplete=\"off\"\n            ref={register({\n              required: 'Trip name is required.'\n            })}\n            className={`${errors.tripName ? 'input-error' : ''}`}\n          />\n          {errors.first_name && (\n            <p className=\"errorMsg\">{errors.tripName.message}</p>\n          )}\n        </Form.Group>\n\n        <Button variant=\"primary\" type=\"submit\">\n          Next\n        </Button>\n      </motion.div>\n    </Form>\n  );\n};\n\nexport default IntineraryForm;\n"],"mappingskB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,iBAA7B;AACA,SAASC,MAAT,QAAuB,eAAvB;;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;EAAA;;EAC/B,MAAM;IAAEC;EAAF,IAAWD,KAAjB;EACA,MAAM;IAAEE,QAAF;IAAYC,YAAZ;IAA0BC;EAA1B,IAAqCT,OAAO,CAAC;IACjDU,aAAa,EAAE;MACbC,QAAQ,EAAEL,IAAI,CAACK;IADF;EADkC,CAAD,CAAlD;;EAMA,MAAMC,QAAQ,GAAIC,IAAD,IAAU;IACzBR,KAAK,CAACS,UAAN,CAAiBD,IAAjB;IACAR,KAAK,CAACU,OAAN,CAAcC,IAAd,CAAmB,SAAnB;EACD,CAHD;;EAKA,oBACE,QAAC,IAAD;IAAM,SAAS,EAAC,YAAhB;IAA6B,QAAQ,EAAER,YAAY,CAACI,QAAD,CAAnD;IAAA,uBACE,QAAC,MAAD,CAAQ,GAAR;MACE,SAAS,EAAC,sBADZ;MAEE,OAAO,EAAE;QAAEK,CAAC,EAAE;MAAL,CAFX;MAGE,OAAO,EAAE;QAAEA,CAAC,EAAE;MAAL,CAHX;MAIE,UAAU,EAAE;QAAEC,SAAS,EAAE;MAAb,CAJd;MAAA,wBAME,QAAC,IAAD,CAAM,KAAN;QAAY,SAAS,EAAC,YAAtB;QAAA,wBACE,QAAC,IAAD,CAAM,KAAN;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE,QAAC,IAAD,CAAM,OAAN;UACE,IAAI,EAAC,MADP;UAEE,IAAI,EAAC,UAFP;UAGE,WAAW,EAAC,YAHd;UAIE,YAAY,EAAC,KAJf;UAKE,GAAG,EAAEX,QAAQ,CAAC;YACZY,QAAQ,EAAE;UADE,CAAD,CALf;UAQE,SAAS,EAAG,GAAEV,MAAM,CAACE,QAAP,GAAkB,aAAlB,GAAkC,EAAG;QARrD;UAAA;UAAA;UAAA;QAAA,QAFF,EAYGF,MAAM,CAACW,UAAP,iBACC;UAAG,SAAS,EAAC,UAAb;UAAA,UAAyBX,MAAM,CAACE,QAAP,CAAgBU;QAAzC;UAAA;UAAA;UAAA;QAAA,QAbJ;MAAA;QAAA;QAAA;QAAA;MAAA,QANF,eAuBE,QAAC,MAAD;QAAQ,OAAO,EAAC,SAAhB;QAA0B,IAAI,EAAC,QAA/B;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAvBF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AA+BD,CA5CD;;GAAMjB,a;UAEuCJ,O;;;KAFvCI,a;AA8CN,eAAekB,cAAf"},"metadata":{},"sourceType":"module"}